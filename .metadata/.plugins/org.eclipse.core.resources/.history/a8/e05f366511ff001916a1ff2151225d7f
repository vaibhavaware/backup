package com.ivl.moviecatalogservice.resources;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import resources.MovieCatalogService.models.CatalogItem;
import resources.MovieCatalogService.models.Movie;
import resources.MovieCatalogService.models.Rating;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/vaibhav")
public class MovieCatlogController {

	private static final Logger logger = LoggerFactory.getLogger(MovieCatlogController.class);

	@Autowired
	private RestTemplate restTemplate;

	@RequestMapping("/movielist")
	public List<CatalogItem> getCatalog() {

		ResponseEntity<List<Rating>> rateResponse = restTemplate.exchange("http://localhost:8083/movieratings",
				HttpMethod.GET, null, new ParameterizedTypeReference<List<Rating>>() {
				});
		List<Rating> ratings = rateResponse.getBody();

		Rating[] ratingList = restTemplate.getForObject("http://localhost:8083/movieratings", Rating[].class);
		ratings = Arrays.asList(ratingList);

		return ratings.stream().map(rating -> {

			Movie movie = restTemplate.getForObject("http://localhost:8082/movies/" + rating.getId(), Movie.class);
			// logger.info("**************************" + rating.getId() + " ******** " +
			// movie.getMovieName());

			// Movie movie =
			// restTemplate.getForObject("http://localhost:8762/movie-info-service/movies/"
			// + rating.getMovieId(), Movie.class);
			return new CatalogItem(movie.getMovieName(), movie.getDesciption(), rating.getRating());

		}).collect(Collectors.toList());

	}

	//@GetMapping(value = "/{movieName}")
	public CatalogItem getCatalog(@PathVariable("movieName") String movieName) {

		ResponseEntity<List<Rating>> rateResponse = restTemplate.exchange("http://localhost:8083/movieratings",
				HttpMethod.GET, null, new ParameterizedTypeReference<List<Rating>>() {
				});
		List<Rating> ratings = rateResponse.getBody();

		Rating[] ratingList = restTemplate.getForObject("http://localhost:8083/movieratings", Rating[].class);
		ratings = Arrays.asList(ratingList);

		Movie movie = restTemplate.getForObject("http://localhost:8082/movies" + movieName, Movie.class);
		Rating r = ratings.stream().filter(mv -> mv.getId().equals(movie.getMovieId())).findFirst().orElse(null);
		return new CatalogItem(movie.getMovieName(), movie.getDesciption(), r.getRating());

	}

}
